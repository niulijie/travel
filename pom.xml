<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- pom模型版本 -->
    <modelVersion>4.0.0</modelVersion>

    <!--所有的springboot应用都要以该工程为父工程
        定义了 Java 编译版本为 1.8;
        使用 UTF-8 格式编码;
        继承自 spring-boot-dependencies, 这个里边定义了依赖的版本, 也正是因为 parent 继承了这个依赖, 所以我们在写依赖时才不需要写版本号;
        执行打包操作的配置;
        自动化的资源过滤;
        自动化的插件配置;
        针对 application.properties 和 application.yml 的资源过滤, 包括通过 profile 定义的不同环境的配置文件, 例如 application-dev.properties 和 application-dev.yml.
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.7.RELEASE</version>
        <relativePath/>
    </parent>

    <!-- 项目信息 -->
    <!-- 项目唯一标识 -->
    <groupId>com.niulijie</groupId>
    <!-- 项目名 -->
    <artifactId>travel</artifactId>
    <!-- 打包方式 （pom,war,jar） -->
    <packaging>pom</packaging>
    <!-- 版本 -->
    <version>1.0-SNAPSHOT</version>

    <name>niulijie-travel</name><!-- 项目的名称， Maven 产生的文档用 -->
    <description>Demo project for Spring Boot</description><!-- 项目的描述, Maven 产生的文档用 -->

    <modules>
        <module>jdk8</module>
        <module>Spring</module>
        <module>juc</module>
        <module>X509v3Certificate</module>
        <module>Collections</module>
        <module>springbootweb</module>
        <module>admin</module>
        <module>mdm</module>
    </modules>

    <!-- 属性设置 -->
    <properties>
        <spring.boot.version>2.2.7.RELEASE</spring.boot.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 编译字符编码为utf-8 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><!-- 输出字符编码为UTF-8  -->
        <java.version>1.8</java.version><!-- jdK版本 -->
<!--        <mybatis.version>2.1.3</mybatis.version>-->
    </properties>

    <!-- 依赖关系 -->
    <!--dependencyManagement只是声明依赖，并不实现引入,子项目需要显式的声明需要用的依赖,只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom-->
    <dependencyManagement>
        <dependencies>
        </dependencies>
    </dependencyManagement>

    <!-- 依赖关系 -->
    <!--即使在子模块中不写该依赖项，那么子模块仍然会从父项目中继承该依赖项（全部继承-->
    <dependencies>

        <!--启动器：每一个启动器背后都是一堆的依赖，web启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring.boot.version}</version>
            <scope>test</scope>
        </dependency>-->

        <!--<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.version}</version>
        </dependency>-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <!-- 编译 标志项目可以打成一个可执行jar包-->
    <!--<build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>-->
</project>